name: Deploy to Cloudflare

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  run-ci-tests:
    # Call the reusable CI workflow
    uses: ./.github/workflows/ci.yml
    # Pass secrets required by the test job in ci.yml
    secrets: inherit

  build-docker:
    # Depend on the reusable CI tests job
    needs: run-ci-tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: eigenlayer-ai-agent:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile
          platforms: linux/amd64
      
      - name: Export Docker image
        run: |
          mkdir -p ./dist
          docker save eigenlayer-ai-agent:${{ github.sha }} | gzip > ./dist/agent-image.tar.gz
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent-image
          path: ./dist/agent-image.tar.gz
          retention-days: 1

  deploy-workers:
    # Depend on the reusable CI tests job
    needs: run-ci-tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install Wrangler
        run: npm install -g wrangler
      
      - name: Create KV namespace if it doesn't exist
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          NAMESPACE_ID=$(wrangler kv namespace list | grep AGENT_STORAGE || echo "")
          if [ -z "$NAMESPACE_ID" ]; then
            echo "Creating new KV namespace"
            NAMESPACE_OUTPUT=$(wrangler kv namespace create "AGENT_STORAGE")
            echo "KV_NAMESPACE_ID=$(echo "$NAMESPACE_OUTPUT" | grep -o '{ id = "[^"]*' | grep -o '[^"]*$')" >> $GITHUB_ENV
          else
            echo "KV_NAMESPACE_ID=$(echo $NAMESPACE_ID | awk '{print $1}')" >> $GITHUB_ENV
          fi
      
      - name: Upload Secrets to Cloudflare Worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          WORKER_NAME: eigenlayer-ai-agent-worker
        run: |
          echo "${{ secrets.API_KEY }}" | wrangler secret put API_KEY --name $WORKER_NAME
          echo "${{ secrets.AGENT_PRIVATE_KEY }}" | wrangler secret put AGENT_PRIVATE_KEY --name $WORKER_NAME
      
      - name: Deploy to Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          WORKER_NAME: eigenlayer-ai-agent-worker
        run: |
          wrangler deploy worker.js \
            --name $WORKER_NAME \
            --compatibility-date 2023-10-30 \
            --compatibility-flag nodejs_compat \
            --schedule "*/5 * * * *" \
            --var KV_NAMESPACE_ID=${{ env.KV_NAMESPACE_ID }}

  deploy-container:
    needs: [build-docker, deploy-workers]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: agent-image
          path: ./dist
      
      - name: Install Cloudflare Wrangler
        run: npm install -g wrangler
      
      - name: Authenticate with Cloudflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: echo "$CLOUDFLARE_API_TOKEN" | wrangler login
      
      - name: Deploy container to Cloudflare Workers for Containers
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          # Load the image
          gunzip -c ./dist/agent-image.tar.gz | docker load
          
          # Deploy to Cloudflare
          wrangler workers deploy-container eigenlayer-ai-agent \
            --image eigenlayer-ai-agent:${{ github.sha }} \
            --secret API_KEY=${{ secrets.API_KEY }} \
            --secret AGENT_PRIVATE_KEY=${{ secrets.AGENT_PRIVATE_KEY }} 